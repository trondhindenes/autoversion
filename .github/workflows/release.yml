name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7

          # macOS
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

          # Windows
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

          # FreeBSD
          - goos: freebsd
            goarch: amd64
          - goos: freebsd
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Verify directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking for cmd/autoversion:"
          ls -la cmd/
          ls -la cmd/autoversion/ || echo "cmd/autoversion not found!"

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          BINARY_NAME="autoversion"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          # Build the binary
          go build -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.version }}" \
            -o "${BINARY_NAME}" \
            ./cmd/autoversion

          # Create archive name with convention: autoversion-{os}-{arch}[.exe]
          ARCHIVE_BASE="autoversion-${GOOS}-${GOARCH}"
          if [ -n "$GOARM" ]; then
            ARCHIVE_BASE="${ARCHIVE_BASE}v${GOARM}"
          fi

          # Package based on OS
          if [ "$GOOS" = "windows" ]; then
            # For Windows, create a zip
            zip "${ARCHIVE_BASE}.zip" "${BINARY_NAME}"
            echo "ASSET=${ARCHIVE_BASE}.zip" >> $GITHUB_ENV
          else
            # For Unix-like systems, create a tar.gz
            tar czf "${ARCHIVE_BASE}.tar.gz" "${BINARY_NAME}"
            echo "ASSET=${ARCHIVE_BASE}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autoversion-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          path: ${{ env.ASSET }}
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checksums:
    name: Generate checksums
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > ../checksums.txt
          cd ..
          cat checksums.txt

      - name: Upload checksums to release
        uses: softprops/action-gh-release@v1
        with:
          files: checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
