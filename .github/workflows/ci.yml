name: CI

on:
  push:

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run tests
        run: GITHUB_REF= GITHUB_HEAD_REF= make test

      - name: Run go vet
        run: make vet

      - name: Run go fmt check
        run: |
          if [ -n "$(gofmt -s -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -s -d .
            exit 1
          fi

  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is-prerelease: ${{ steps.get_version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: get_version
        uses: trondhindenes/autoversion-action@v1
        with:
          config: '.autoversion.yaml'

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: 
    - test
    - get-version
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7

          # macOS
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

          # Windows
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

          # FreeBSD
          - goos: freebsd
            goarch: amd64
          - goos: freebsd
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Verify directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking for cmd/autoversion:"
          ls -la cmd/
          ls -la cmd/autoversion/ || echo "cmd/autoversion not found!"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          BINARY_NAME="autoversion"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          # Build the binary
          echo "version is ${{ needs.get-version.outputs.version }}"
          go build -ldflags="-s -w -X main.Version=${{ needs.get-version.outputs.version }}" \
            -o "${BINARY_NAME}" \
            ./cmd/autoversion

          # Create archive name with convention: autoversion-{os}-{arch}[.exe]
          ARCHIVE_BASE="autoversion-${GOOS}-${GOARCH}"
          if [ -n "$GOARM" ]; then
            ARCHIVE_BASE="${ARCHIVE_BASE}v${GOARM}"
          fi

          # Package based on OS
          if [ "$GOOS" = "windows" ]; then
            # For Windows, create a zip
            zip "${ARCHIVE_BASE}.zip" "${BINARY_NAME}"
            echo "ASSET=${ARCHIVE_BASE}.zip" >> $GITHUB_ENV
          else
            # For Unix-like systems, create a tar.gz
            tar czf "${ARCHIVE_BASE}.tar.gz" "${BINARY_NAME}"
            echo "ASSET=${ARCHIVE_BASE}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autoversion-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          path: ${{ env.ASSET }}
          retention-days: 7

  release:
    name: Create Release
    needs: 
      - build
      - get-version
    if: needs.get-version.outputs.is-prerelease == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          VERSION="v${{ needs.get-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${VERSION}" -m "Release ${VERSION}"
          git push origin "${VERSION}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and push Docker image
    needs:
    - build
    - get-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            artifact: autoversion-linux-amd64
          - platform: linux/arm64
            artifact: autoversion-linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: docker-context

      - name: Extract binary from archive
        run: |
          cd docker-context
          tar -xzf *.tar.gz
          rm *.tar.gz
          chmod +x autoversion

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.get-version.outputs.version }}
            type=raw,value=latest,enable=${{ needs.get-version.outputs.is-prerelease == 'false' }}

      - name: Copy Dockerfile to context
        run: cp Dockerfile docker-context/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-context
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          target: autoversion
          provenance: false

      - name: Extract metadata for action image
        id: meta-action
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}-action,value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}}-action,value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}}-action,value=${{ needs.get-version.outputs.version }}
            type=raw,value=latest-action,enable=${{ needs.get-version.outputs.is-prerelease == 'false' }}

      - name: Copy entrypoint script to context
        run: cp entrypoint.sh docker-context/

      - name: Build and push GitHub Action image
        uses: docker/build-push-action@v5
        with:
          context: docker-context
          target: autoversion-action
          push: true
          tags: ${{ steps.meta-action.outputs.tags }}
          labels: ${{ steps.meta-action.outputs.labels }}
          platforms: ${{ matrix.platform }}
          provenance: false