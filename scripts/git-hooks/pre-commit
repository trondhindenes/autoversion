#!/bin/bash
#
# Pre-commit hook that formats Go code using gofmt
#
# This hook will automatically format any staged Go files before committing.
# If formatting changes are made, the files are re-staged automatically.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the list of staged Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$STAGED_GO_FILES" ]; then
    # No Go files staged, nothing to do
    exit 0
fi

echo -e "${YELLOW}Running gofmt on staged Go files...${NC}"

# Track if any files were formatted
FILES_FORMATTED=0

# Format each staged Go file
for FILE in $STAGED_GO_FILES; do
    # Check if file still exists (might have been deleted)
    if [ ! -f "$FILE" ]; then
        continue
    fi

    # Format the file (gofmt -w writes the result to the file)
    # -s flag simplifies code when possible
    gofmt -w -s "$FILE"

    # Check if the file was modified by gofmt
    if git diff --quiet "$FILE"; then
        # No changes made by gofmt
        :
    else
        echo -e "  ${GREEN}âœ“${NC} Formatted: $FILE"
        # Re-stage the file with the formatting changes
        git add "$FILE"
        FILES_FORMATTED=$((FILES_FORMATTED + 1))
    fi
done

if [ $FILES_FORMATTED -gt 0 ]; then
    echo -e "${GREEN}Formatted $FILES_FORMATTED file(s) and re-staged them.${NC}"
else
    echo -e "${GREEN}All staged Go files are already properly formatted.${NC}"
fi

exit 0
